# 11_8puzzle_astar.py
import heapq

GOAL = (1,2,3,4,5,6,7,8,0)

def manhattan(state):
    dist = 0
    for i, val in enumerate(state):
        if val==0: continue
        goal_i = GOAL.index(val)
        dist += abs(i//3 - goal_i//3) + abs(i%3 - goal_i%3)
    return dist

def neighbors(state):
    s = list(state)
    i = s.index(0)
    moves = []
    r, c = divmod(i,3)
    for dr,dc in [(-1,0),(1,0),(0,-1),(0,1)]:
        nr, nc = r+dr, c+dc
        if 0 <= nr < 3 and 0 <= nc < 3:
            j = nr*3 + nc
            ns = list(s)
            ns[i], ns[j] = ns[j], ns[i]
            moves.append(tuple(ns))
    return moves

def astar(start):
    open_heap = []
    g = {start:0}
    f = manhattan(start)
    heapq.heappush(open_heap,(f,start))
    parent = {start:None}
    while open_heap:
        _, cur = heapq.heappop(open_heap)
        if cur == GOAL:
            path = []
            while cur:
                path.append(cur)
                cur = parent[cur]
            return list(reversed(path))
        for nb in neighbors(cur):
            tentative = g[cur] + 1
            if tentative < g.get(nb, 1e9):
                parent[nb] = cur
                g[nb] = tentative
                heapq.heappush(open_heap,(tentative + manhattan(nb), nb))
    return None

if __name__ == "__main__":
    raw = input("Enter 9 numbers (0 for blank) separated by spaces: ")
    start = tuple(int(x) for x in raw.split())
    path = astar(start)
    if path:
        for step in path:
            for i in range(0,9,3):
                print(step[i:i+3])
            print()
        print("Steps:", len(path)-1)
    else:
        print("No solution found")
