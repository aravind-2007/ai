# Alpha-Beta Pruning Algorithm Implementation

# Function to implement Alpha-Beta pruning
def alpha_beta_pruning(depth, nodeIndex, maximizingPlayer, values, alpha, beta, maxDepth):
    # Base case: leaf node reached
    if depth == maxDepth:
        return values[nodeIndex]

    if maximizingPlayer:
        best = float('-inf')

        # Recur for left and right child
        for i in range(2):
            val = alpha_beta_pruning(depth + 1, nodeIndex * 2 + i,
                                     False, values, alpha, beta, maxDepth)
            best = max(best, val)
            alpha = max(alpha, best)

            # Alpha-Beta Pruning
            if beta <= alpha:
                break
        return best
    else:
        best = float('inf')

        # Recur for left and right child
        for i in range(2):
            val = alpha_beta_pruning(depth + 1, nodeIndex * 2 + i,
                                     True, values, alpha, beta, maxDepth)
            best = min(best, val)
            beta = min(beta, best)

            # Alpha-Beta Pruning
            if beta <= alpha:
                break
        return best


# Driver Code
if __name__ == "__main__":
    # Example: Game tree with depth = 3 (8 leaf nodes)
    values = [3, 5, 6, 9, 1, 2, 0, -1]  # Leaf node values
    maxDepth = 3

    print("Leaf node values:", values)
    optimal_value = alpha_beta_pruning(0, 0, True, values, float('-inf'), float('inf'), maxDepth)

    print("The optimal value is:", optimal_value)
